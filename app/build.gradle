apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.looking.classicalparty"
        minSdkVersion 18
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    signingConfigs {
        debugConfig {
            keyAlias 'classical'
<<<<<<< HEAD
            keyPassword 'likeclassical'//System.console().readLine(" :input keyPassword : ")
            storeFile file('../classical.jks')
            storePassword 'likeclassical'//System.console().readLine(" :input storePassword : ");
=======
            keyPassword 'likeclassical' //System.console().readLine(" :input keyPassword : ")
            storeFile file('../classical.jks')
            storePassword 'likeclassical' //System.console().readLine(" :input storePassword : ");
>>>>>>> b4c04e75eb2a040f305371fa35280f114c79f72e

        }

        releaseConfig {
            keyAlias 'classical'
<<<<<<< HEAD
            keyPassword 'likeclassical'//System.console().readLine(" :input keyPassword : ")
            storeFile file('../classical.jks')
            storePassword 'likeclassical'//System.console().readLine(" :input storePassword : ");
        }
    }

    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            if (variant.buildType.name.equals('release')) {
                def releaseApkName = 'classical-v' + defaultConfig.versionName + '-' + productFlavors.name + '.apk'
                output.outputFile = new File(oldFile.parent, releaseApkName)
            } else if (variant.buildType.name.equals('debug')) {
                def releaseApkName = getDebugApkName()
                output.outputFile = new File(oldFile.parent, releaseApkName)
            }
=======
            keyPassword 'likeclassical' //System.console().readLine(" :input keyPassword : ")
            storeFile file('../classical.jks')
            storePassword 'likeclassical' //System.console().readLine(" :input storePassword : ");
>>>>>>> b4c04e75eb2a040f305371fa35280f114c79f72e
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("string", "app_name", "classical")
        }
        //修改生成的apk名字
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def oldFile = output.outputFile
                if (variant.buildType.name.equals('release')) {
                    def releaseApkName = 'classical-v' + defaultConfig.versionName + '-' + productFlavors.name + '.apk'
                    output.outputFile = new File(oldFile.parent, releaseApkName)
                } else if (variant.buildType.name.equals('debug')) {
                    def releaseApkName = getDebugApkName()
                    output.outputFile = new File(oldFile.parent, releaseApkName)
                }
            }
        }


        debug {
            minifyEnabled false
            resValue("string", "app_name", "test-classical")
            signingConfig signingConfigs.debugConfig
        }
    }
}


def releaseTime() {
    new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"));
}

def getDebugApkName() {
    'classicalParty-v' + android.defaultConfig.versionName + '-' + "(" + releaseTime() + ")" + '-' + '01' + '.apk'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.squareup.okhttp:okhttp:2.7.0'
    compile 'com.google.code.gson:gson:2.6.2'
}
